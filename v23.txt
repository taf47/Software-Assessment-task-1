import tkinter as tk
from PIL import Image, ImageTk

class TriangleLearningApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Types of Triangles Learning App")
        self.root.geometry("800x600")
        self.root.resizable(False, False)
        
        # Dark mode colors
        self.dark_mode = False
        self.colors = {
            'light': {
                'bg': "#f0f8ff",
                'text': "navy",
                'button1': "#4CAF50",  # green
                'button2': "#2196F3",   # blue
                'content_bg': "white",
                'frame_bg': "#f9f9f9",
                'symbol_fg': "black"
            },
            'dark': {
                'bg': "#2d2d2d",
                'text': "#add8e6",  # light blue
                'button1': "#ff66b2",   # pink
                'button2': "#bb86fc",  # purple
                'content_bg': "#424242",
                'frame_bg': "#535353",
                'symbol_fg': "white"
            }
        }

        try:
            self.bg_image = Image.open("triangle_bg.png")
            self.bg_image = self.bg_image.resize((800, 600), Image.LANCZOS)
            self.bg_photo = ImageTk.PhotoImage(self.bg_image)
        except:
            self.bg_photo = None

        self.canvas = tk.Canvas(self.root, width=800, height=600, bg=self.colors['light']['bg'])
        self.canvas.pack(fill="both", expand=True)

        if self.bg_photo:
            self.canvas.create_image(0, 0, image=self.bg_photo, anchor="nw")
        else:
            self.title_text_id = self.canvas.create_text(400, 50, text="Types of Triangles",
                                    font=("Arial", 24, "bold"), fill=self.colors['light']['text'])
            self.author_text_id = self.canvas.create_text(400, 550, text="TAFHEEM MUHAMMAD",
                                    font=("Arial", 12), fill=self.colors['light']['text'])

        btn_style = {
            "font": ("Arial", 16, "bold"),
            "width": 12,
            "height": 1,
            "borderwidth": 2,
            "relief": "raised",
            "activebackground": "#555555"
        }

        self.quiz_btn = tk.Button(self.root, text="QUIZ", command=self.show_quiz,
                                  bg=self.colors['light']['button1'], fg="white", **btn_style)
        self.canvas.create_window(200, 400, anchor="center", window=self.quiz_btn)

        self.tutorial_btn = tk.Button(self.root, text="TUTORIAL", command=self.show_tutorial,
                                      bg=self.colors['light']['button2'], fg="white", **btn_style)
        self.canvas.create_window(600, 400, anchor="center", window=self.tutorial_btn)

        # Dark mode
        self.mode_btn = tk.Button(self.root, text="‚òÄÔ∏èüåô", command=self.toggle_dark_mode,
                                 font=("Arial", 12), bd=0, bg=self.colors['light']['bg'],
                                 fg=self.colors['light']['symbol_fg'], activeforeground=self.colors['light']['symbol_fg'])
        self.canvas.create_window(750, 30, anchor="center", window=self.mode_btn)

        self.content_frame = None
        self.root.bind("<Escape>", lambda e: self.root.quit())

    def toggle_dark_mode(self):
        self.dark_mode = not self.dark_mode
        mode = 'dark' if self.dark_mode else 'light'
        
        self.canvas.config(bg=self.colors[mode]['bg'])
        self.mode_btn.config(text="üò¥" if self.dark_mode else "‚òÄÔ∏é", 
                            bg=self.colors[mode]['bg'],
                            fg=self.colors[mode]['symbol_fg'],
                            activeforeground=self.colors[mode]['symbol_fg'])
        
        self.quiz_btn.config(bg=self.colors[mode]['button1'])
        self.tutorial_btn.config(bg=self.colors[mode]['button2'])
    
        if self.content_frame:
            if hasattr(self, 'q_label'): 
                self.q_label.config(bg=self.colors[mode]['content_bg'], fg=self.colors[mode]['text'])
                self.score_label.config(bg=self.colors[mode]['content_bg'], fg=self.colors[mode]['text'])
                for btn in self.option_buttons:
                    btn.config(bg=self.colors[mode]['content_bg'], fg=self.colors[mode]['text'])
            self.content_frame.config(bg=self.colors[mode]['content_bg'])

        if self.bg_photo is None:
            self.canvas.itemconfig(self.title_text_id, fill=self.colors[mode]['text'])
            self.canvas.itemconfig(self.author_text_id, fill=self.colors[mode]['text'])

    def clear_main_area(self):
        if self.content_frame:
            self.content_frame.destroy()
            self.content_frame = None

    def show_quiz(self):
        self.clear_main_area()
        mode = 'dark' if self.dark_mode else 'light'
        
        self.content_frame = tk.Frame(self.root, bg=self.colors[mode]['content_bg'], bd=2)
        self.content_frame.place(x=0, y=0, width=800, height=600)

        tk.Label(self.content_frame, text="Triangles Quiz", font=("Arial", 20, "bold"),
                 fg=self.colors[mode]['text'], bg=self.colors[mode]['content_bg']).pack(pady=10)

        self.questions = [
            {"question": "What type of triangle has all sides equal?",
             "options": ["Equilateral", "Isosceles", "Scalene", "Right"], "answer": "Equilateral"},
            {"question": "Which triangle has one 90¬∞ angle?",
             "options": ["Acute", "Obtuse", "Right", "Equilateral"], "answer": "Right"},
            {"question": "How many equal sides does an isosceles triangle have?",
             "options": ["0", "1", "2", "3"], "answer": "2"},
            {"question": "What is true about a scalene triangle?",
             "options": ["All sides equal", "Two equal sides", "All sides different", "One 90¬∞ angle"], "answer": "All sides different"},
            {"question": "Which triangle has one angle greater than 90¬∞?",
             "options": ["Right", "Acute", "Equilateral", "Obtuse"], "answer": "Obtuse"}
        ]
        self.current_q = 0
        self.score = 0

        self.q_label = tk.Label(self.content_frame, text="", font=("Arial", 14),
                                wraplength=600, bg=self.colors[mode]['content_bg'], 
                                fg=self.colors[mode]['text'], justify="center")
        self.q_label.pack(pady=20)

        self.option_buttons = []
        for i in range(4):
            btn = tk.Button(self.content_frame, font=("Arial", 12), width=30,
                           bg=self.colors[mode]['content_bg'], fg=self.colors[mode]['text'])
            btn.pack(pady=5)
            self.option_buttons.append(btn)

        self.score_label = tk.Label(self.content_frame, text=f"Score: 0/{len(self.questions)}",
                                    font=("Arial", 12), bg=self.colors[mode]['content_bg'],
                                    fg=self.colors[mode]['text'])
        self.score_label.pack(pady=10)

        tk.Button(self.content_frame, text="Back", command=self.clear_main_area,
                 bg=self.colors[mode]['content_bg'], fg=self.colors[mode]['text']).pack(pady=10)

        self.update_question()

    def update_question(self):
        q = self.questions[self.current_q]
        self.q_label.config(text=q["question"])
        for i in range(4):
            self.option_buttons[i].config(
                text=q["options"][i],
                command=lambda idx=i: self.check_answer(q["options"][idx], q["answer"])
            )

    def check_answer(self, selected, correct):
        if selected == correct:
            self.score += 1
        self.score_label.config(text=f"Score: {self.score}/{len(self.questions)}")
        self.current_q += 1
        if self.current_q < len(self.questions):
            self.update_question()
        else:
            for widget in self.content_frame.winfo_children():
                widget.destroy()
            mode = 'dark' if self.dark_mode else 'light'
            tk.Label(self.content_frame, text=f"Quiz Completed!\nFinal Score: {self.score}/{len(self.questions)}",
                     font=("Arial", 16), bg=self.colors[mode]['content_bg'],
                     fg=self.colors[mode]['text']).pack(pady=50)
            tk.Button(self.content_frame, text="Restart Quiz", command=self.show_quiz,
                     bg=self.colors[mode]['button2'], fg="white", font=("Arial", 12, "bold")).pack(pady=10)
            tk.Button(self.content_frame, text="Back", command=self.clear_main_area,
                     bg=self.colors[mode]['button1'], fg="white", font=("Arial", 12)).pack(pady=5)

def show_tutorial(self):
    self.clear_main_area()
    mode = 'dark' if self.dark_mode else 'light'

    self.content_frame = tk.Frame(self.root, bg=self.colors[mode]['content_bg'])
    self.content_frame.place(x=0, y=0, width=800, height=600)

    left_frame = tk.Frame(self.content_frame, bg=self.colors[mode]['content_bg'])
    left_frame.pack(side="left", fill="both", expand=True, padx=(10, 5), pady=10)

    right_frame = tk.Frame(self.content_frame, bg=self.colors[mode]['content_bg'])
    right_frame.pack(side="right", fill="y", padx=(5, 10), pady=10)

    canvas = tk.Canvas(left_frame, bg=self.colors[mode]['content_bg'])
    scrollbar = tk.Scrollbar(left_frame, orient="vertical", command=canvas.yview)
    scroll_frame = tk.Frame(canvas, bg=self.colors[mode]['content_bg'])

    scroll_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
    canvas.create_window((0, 0), window=scroll_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    def _on_mousewheel(event):
        canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    canvas.bind_all("<MouseWheel>", _on_mousewheel)

    tk.Label(scroll_frame, text="Types of Triangles Tutorial", font=("Arial", 20, "bold"),
             fg=self.colors[mode]['text'], bg=self.colors[mode]['content_bg']).pack(pady=20)

    lessons = [
        ("Equilateral Triangle", "All three sides are equal\nAll three angles are 60¬∞"),
        ("Isosceles Triangle", "Two sides are equal\nTwo angles are equal"),
        ("Scalene Triangle", "All sides are different\nAll angles are different"),
        ("Right Triangle", "One angle is exactly 90¬∞\nFollows Pythagorean theorem"),
        ("Acute Triangle", "All angles are less than 90¬∞"),
        ("Obtuse Triangle", "One angle is greater than 90¬∞")
    ]

    for title, desc in lessons:
        frame = tk.Frame(scroll_frame, bg=self.colors[mode]['frame_bg'], 
                         bd=2, relief="groove", padx=10, pady=10)
        frame.pack(fill="x", padx=10, pady=5)
        tk.Label(frame, text=title, font=("Arial", 16, "bold"), 
                 fg=self.colors[mode]['text'], bg=self.colors[mode]['frame_bg']).pack(anchor="w")
        tk.Label(frame, text=desc, font=("Arial", 12), justify="left", 
                 bg=self.colors[mode]['frame_bg'], fg=self.colors[mode]['text']).pack(anchor="w", pady=5)

    tk.Button(scroll_frame, text="Back", command=self.clear_main_area,
              font=("Arial", 12), bg=self.colors[mode]['button1'], fg="white").pack(pady=20)


    try:
        img = Image.open("classification-of-triangles-1621331800.png")
        img = img.resize((300, 450), Image.LANCZOS)
        self.triangle_img = ImageTk.PhotoImage(img)
        tk.Label(right_frame, image=self.triangle_img, bg=self.colors[mode]['content_bg']).pack()
    except Exception as e:
        tk.Label(right_frame, text="Image not found", bg=self.colors[mode]['content_bg'], 
                 fg=self.colors[mode]['text'], font=("Arial", 12)).pack()



if __name__ == "__main__":
    root = tk.Tk()
    app = TriangleLearningApp(root)

    if app.bg_photo is None:
        print("\nTo use a background image:")
        print("1. Save an image as 'triangle_bg.png'")
        print("2. Place it in the same folder as this file\n")

    root.mainloop()
